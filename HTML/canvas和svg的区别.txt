简单理解：
Canvas：
	Canvas 是HTML 页面中一块矩形的画布，在这个画布中我们可以自由地控制
	每一个像素，Canvas 本身是没有绘图能力的，因此所有的绘图工作都必须在
	JS中进行，Canvas 通过 JavaScript 来绘制 2D 图形。Canvas 是逐像素进行渲染的。
	在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。
	如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。
	创建Canvas我们需要经历以下步骤来进行

	1. JavaScript 使用 id 来寻找 canvas 元素：
		var c=document.getElementById("myCanvas");
	2. 然后，创建 context 对象：
		var cxt=c.getContext("2d"); 
		// getContext("2d") 对象是内建的 HTML5 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法
		
Svg:
	SVG 是一种使用 XML 描述 2D 图形的语言。它可创造一种可伸缩的矢量图图形
	SVG 图像在放大或改变尺寸的情况下其图形质量不会有损失
	SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。
	您可以为某个元素附加 JavaScript 事件处理器。
	在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。
	这里就体现了SVG依赖DOM的特性，而过渡依赖DOM是不适合应用在需要频繁重绘重排的场景中的非常损耗性能
	
Canvas和Svg的区别：
	Canvas
		依赖分辨率
		不支持事件处理器
		弱的文本渲染能力
		能够以 .png 或 .jpg 格式保存结果图像
		最适合图像密集型的游戏，其中的许多对象会被频繁重绘
	SVG
		不依赖分辨率
		支持事件处理器
		最适合带有大型渲染区域的应用程序（比如谷歌地图）
		复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）
		不适合游戏应用

	












