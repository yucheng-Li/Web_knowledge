MVC和MVVM

1. 首先我们先说说对MVC的理解
	MVC （Model  View  Controller） 模型   视图   控制
	可以理解成：外观  -》机制控制 -》功能/数据
	
	最上层视图层，它是系统的最外层，直接面向用户的，用户通过这层来向系统来发送指令；
	中间层控制层，它根据视图层发送过来的指令来向下一层的数据层获取对应的指令，并将获取到的数据进行相应的操作，然后产生最终的结果反馈到视图层
	最下层数据层，它储存着系统中所有的信息和数据，这些数据服务于控制层，控制层根据指令来调用

2. MVVM理解
	view( 视图 ) \ view-model ( 中间处理层 )\ model （ 数据层 ）
	MMVC 更像是现在大家口中的大前端的概念，view 视图层是最薄的一层，直接面向用户和用户反馈的窗口，现在我们制作一个动态的页面，用户和网页的
	互动行为会大大增加，而这些动态的响应也必然会增加增加网页的复杂性也考验着网页布局的合理性，这就要求的视图层和数据层中间的处理层（view-model）
	设计得更加合理，而这就是Vue, React 这些强大的前端框架出现的合理性，用户和网页的交互行为，在这些前端框架中都能很好的处理。而为什么叫view-model呢？
	比如用户的鼠标悬停在某个按键上，我们就可根据这个行为做出后续的效果展示，鼠标悬停在按钮上就让按钮变红色，这个行为要是换做MVC 框架，鼠标悬停在按钮上相当于指令
	controller 根据这个指令向 model获取数据（键值对）？感觉有点鸡肋，这个动态的响应复杂吗，其实不复杂，要是我们的controller 能在more stronger 的话就不用调用到model
	我们在view-model中写一个事件就可以了，指令一来事件就触发，然后随即做出改变按钮样式的动作就不必关联到最底层的model了。
	
	MVC		是后端的分层开发的概念
	MVVM		是前端视图层的概念
	
	MVVM最大的特点是实现了数据的双向绑定
	
	
	
	
	总结一波：
	MVC和MVVM 指的是两种设计模式，先讲MVC 分为 Model View Controller 简单理解就是视图层、控制层、数据层，
	换句话说一个事件的发生过程是这样的：1. 用户和应用产生交互 2.控制器的事件处理器被触发 3. 控制器从数据层请求数据，并将其返回给视图
	4. 视图将数据呈现给用户
	V层是视图层，控制界面显示，将界面与数据连接。M层存放数据，处理逻辑，比如处理从数据库调用的数据，还有业务逻辑处理。
	C层用于连接M和V，Controller 负责显示界面、响应用户的操作以及与 Model 交互，比如操作DOM、对事件的监听。这就导致了Controller和 View 紧耦合、逻辑复杂，难以维护。
	然后到了MVVM
	2、MVVM设计模式
 MVVM与MVC最大的区别就是：它实现了View和Model的自动同步，也就是当Model的属性改变时，我们不用再自己手动操作Dom元素，来改变View的显示，而是改变属性后该属性对应View层显示会自动改变。
由此和view层分开来，只是注重数据的改动即可。MVVM设计模式中最重要的就是实现了View和Model的自动同步，所以可以不用频繁地手动操作DOM元素。
 比如说Vue框架，Vue实例中的data相当于Model层，而ViewModel层的核心是Vue中的双向数据绑定，即Model变化时VIew可以实时更新，View变化也能让Model发生变化。
 整体看来，MVVM比MVC精简很多，不仅简化了业务与界面的依赖，还解决了数据频繁更新的问题，不用再用选择器操作DOM元素。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	