V8 引擎的主要作用是编译和执行JS代码、处理调用栈、内存分配和垃圾回收

1. V8 引擎编译和执行JS代码的流程
	三个重要的组件： 解析器、解释器、编译器
	解析器: 负责将JS源码解析成抽象语法树AST	（Abstact Synax Tree）
	解释器：负责将AST解释成字节码 bytecode，同时也具有直接解释执行bytecode的能力
	编译器：负责编译出更加高效的机器代码
	
	V8旧架构的编译流程：
	第一次：JS源码  -》parser -》AST -》full-codegen( 基准编译器 ) -》机器代码
	第二次：JS源码  -》 parser -》 AST -》crankshaft( 优化编译器 ) -》机器码
	
	V8新框架的编译流程
	JS源码  -》parser -》AST -》Igniton（基准解释器）-》bytecode字节码
	-》在字节码不断地运行过程中，解释器收集到了很多可以优化代码的信息，这些信息发送给编译器TurboFan
	-》TruboFan（优化编译器）根据这些信息生成优化后的机器代码
	