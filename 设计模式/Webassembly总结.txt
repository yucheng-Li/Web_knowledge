	本文主要介绍了WebAssembly这个技术以及一种叫 wasm的可移植体积小加载快并且可兼容Web的全新格式，
首先是什么样的需要导致这项技术的出现呢？
如今在业务需求越来越复杂的现在，前端的开发逻辑越来越复杂，相应的代码量随之变的越来越多。
相应的，整个项目的起步的时间越来越长。在性能不好的电脑上，启动一个前端的项目甚至要花上十多秒。
人们想象力也越来越丰富，想把3D游戏放在Web端上，Google Earth \Auto CAD 这些大型引用部署

但是以往的仅仅用JS来编写这些应用在代码的效率上几乎是不可能的，其中也是由于JS的设计问题导致的
JS的弱类型和垃圾回收机制导致的代码的性能问题，之前出现了asm.js 这项技术它是WebAssembly的前身，
asm.js相当于JS的一个严格子集，解决了JS的上述的两个问题，但代码的可读性也较差，
WebAssembly出现了，它更优于asm.js原因是，它是一种类似于汇编语言的底层语言有着紧凑的二进制格式
而asm.js还要经过Parser，要经过ByteCode Compiler，这两步是JavaScript代码在引擎执行过程当中消耗时间最多的两步

WebAssembly的流程：
	C/C++ -> ( Emscripten 编译器) -> wasm模块 -> ( JavaScript胶结代码 ) -> .HTML -> 浏览器呈现

