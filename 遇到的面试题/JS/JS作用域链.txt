1. 请你解释一下什么是JS的作用域链
	JS作用域链就是变量对象的数组，最前面的是当前函数的活动对象，下一级是当前函数的父级的活动对象，再下级是爷爷级的。。。
	一直到全局上下文的活动对象。当执行引擎在解析一个变量名的时候，会沿着当前的执行函数的作用域链查找，当找到了直接就使用，
	找不到了就报错
	
2. 延长作用域链
	可以用 with 和 try-catch语句 或 catch 
	延长作用域链的意思是，通过上述方法人为的增加一个变量对象到当前作用域链的最前端，且新增的变量对象会在代码执行后被移除
	eg:
		function buildUrl( ) {
			var qs = 2;
			with( location ) {
				var url = href + qs；// 这样首先会在location 的活动对象中查找是否存在 变量 href 和 qs;
			}
			return url;
		}
		
3. 没有块级作用域
	像其它类C的语言中，每一对封闭的花括号都代表一个自己的作用域，但在JS中像if、for这些的语句的封闭的花括号中的变量
	在条件判断过后或循环过后仍会存在在循环的外部执行环境中
	eg:
		for( var i = 0; i < 10 ;i++) {
			doSomething( i );
		}
		alert( i ); //10
		
4. 不声明直接初始化变量导致变量的作用域变化问题
	使用var 声明的变量会自动被添加到最近的环境中，如果在函数中定义最近的环境就是函数的局部环境
	如果不使用var 声明则该变量会被自动添加到全局环境中；
	function add( num1, num2) { 
		var  sum = num1 + num2;
		return sum;
	}
	var result = add( 10, 20);
	alert( sum ); //报错
	
	function add( num1, num2) { 
		 sum = num1 + num2;
		return sum;
	}
	var result = add( 10, 20);
	alert( sum ); // 30 
	
	
	
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		