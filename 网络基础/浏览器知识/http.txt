http是什么？ http://www.ruanyifeng.com/blog/2016/08/http.html [ 阮一峰http协议入门 ]
	http协议是互联网的基础协议，http协议主要规定了客户端和服务端之间通信的格式

http/0.9
	极为简单客户端只能发送一个GET命令，服务端只能相应HTML格式的字符串，不能别的格式

http/1.0
	1. 任何格式都能传输了
	2. 在GET命令基础上新增了POST 和 HEAD命令
	3. 每次通信必须包含头部信息
	4. 服务端新增Content-Type 字段来描述返回数据的格式
		新增Content-Encoding指明数据压缩方法
	5. 缺点每个TCP连接只能发送一个请求，数据发送完毕连接就关闭，且TCP新建的成本很高

http/1.1
	1. 引入持久连接（keep-alive）,即默认TCP连接不关闭，但最多可同时建立6个连接
	2. 引入管道机制，即客户端在一个TCP连接里可以同时发送多个请求，以往只能一次处理完一个请求再继续
	3. 增加 Content-Length 声明本次回应的数据包的数据长度，因为引入管道机制后同时返回的请求可能不止一个，需要告诉客户端这个请求的长度是多少来判断是否传输完毕
	4. 引入 分块传输编码（transfer encoding), 为了提高数据的传输效率将数据块裁成一块块的，由服务端回应的头信息有Transfer-Encoding字段来表明该数据是分块的
	5. 缺点：虽然1.1版允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应。
		要是前面的回应特别慢，后面就会有许多请求排队等着。这称为"队头堵塞"（Head-of-line blocking）。
		为了避免这个问题，只有两种方法：一是减少请求数，二是同时多开持久连接。
		
http/2
	http/1.1版的头信息肯定是文本（ASCII编码），数据体可以是文本也可以是二进制，
	http/2则彻头彻尾的是一个二进制协议，头信息和数据体都是二进制，并且统称为"帧"（frame）：头信息帧和数据帧。
	二进制协议的一个好处是，可以定义额外的帧。HTTP/2 定义了近十种帧，为将来的高级应用打好了基础。
	如果使用文本实现这种功能，解析数据将会变得非常麻烦，二进制解析则方便得多。
	1. 多工
		HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应（以前版本是要求按序处理的），这样就避免了"队头堵塞"。
	举例来说，在一个TCP连接里面，服务器同时收到了A请求和B请求，于是先回应A请求，结果发现处理过程非常耗时，于是就发送A请求已经处理好的部分，
	接着回应B请求，完成后，再发送A请求剩下的部分。这样双向的、实时的通信，就叫做多工（Multiplexing）。
	2. 数据流
		因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。因此，必须要对数据包做标记，指出它属于哪个回应。
	HTTP/2 将每个请求或回应的所有数据包，称为一个数据流（stream）。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流ID，用来区分它属于哪个数据流。
	另外还规定，客户端发出的数据流，ID一律为奇数，服务器发出的，ID为偶数。数据流发送到一半的时候，客户端和服务器都可以发送信号（RST_STREAM帧），
	取消这个数据流。1.1版取消数据流的唯一方法，就是关闭TCP连接。这就是说，HTTP/2 可以取消某一次请求，同时保证TCP连接还打开着，可以被其他请求使用。
	客户端还可以指定数据流的优先级。优先级越高，服务器就会越早回应。
	3. 头信息压缩
		HTTP 协议不带有状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如Cookie和User Agent，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。
	HTTP/2 对这一点做了优化，引入了头信息压缩机制（header compression）。一方面，头信息使用gzip或compress压缩后再发送；
	另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了。
	4. 服务器推送
		HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送（server push）。
	常见场景是客户端请求一个网页，这个网页里面包含很多静态资源。正常情况下，客户端必须收到网页后，解析HTML源码，
	发现有静态资源，再发出静态资源请求。其实，服务器可以预期到客户端请求网页后，很可能会再请求静态资源，
	所以就主动把这些静态资源随着网页一起发给客户端了。
		
		
		
		
		
		
		
		
	
