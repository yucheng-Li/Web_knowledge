闭包的形成与 “变量的作用域" 以及 "变量的生存周期" 密切相关。

1. 对变量的生存周期的理解
	f 返回了一个匿名函数的引用，它可以访问到 func()
	被调用时产生的环境，而局部变量 a 一直处在这个环境里。
	既然局部变量所在的环境还能被外界
	访问，这个局部变量就有了不被销毁的理由。在这里产生了一个闭包结构，
	局部变量的生命周期看起来就被延续了。
	
2. 闭包的作用
	（1）. 封装变量
		我们希望函数中的一个变量在函数运行结束后不被销毁，能保留之前我们运行的结果，以便之后
		调用，当然我们可以把这个变量设为全局变量但是我们又不希望这个变量被别人修改，只想在这个函数里面
		使用，因此我们就可以通过闭包将它封装起来
		
	（2）. 延续局部变量的寿命
		img 对象经常用于进行数据上报，但是report 函数并不是每一次都成功发起了 HTTP 请求。因此可能
		需要多次请求，但是report函数变量在执行完后就会立即销毁，那么怎么解决这个矛盾呢？这就需要
		闭包来延长局部变量的寿命
		var report = function( src ){ 
		 var img = new Image(); 
		 img.src = src; 
		}; 
		report( 'http://xxx.com/getUserInfo' );