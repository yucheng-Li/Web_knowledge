1. new 关键字会进行如下的操作：
	（1）创建一个新的空对象；
	（2）绑定构造函数的原型；（ o.__proto__ = Pers8on.prototype）（o.constructor = Person) 
	（3）将构造函数的作用域赋给新对象（因此this就指向了这个对象）；（call）
	（4）执行构造函数中的代码（为这个新对象添加属性）；（初始化新对象的地址）
	（5）返回新对象。
	
		function myNew(Func, ...args) {
			// 1. 创建一个空的对象
			const instance = {};
			// 2. 连接构造函数的原型 
			if (Func.prototype) {
			  Object.setPrototypeOf(instance, Func.prototype) // Object.setPrototypeOf() 方法设置一个指定的对象的原型 ( 即, 内部[[Prototype]]属性）到另一个对象或  null
			}
			// 3. 改变构造函数的this 的指向
			const res = Func.apply(instance, args)
			// 4. 构造函数是否有返回值
			if (typeof res === "function" || (typeof res === "object" && res !== null)) {
			  return res
			}
			//为什么要判断返回值的类型？
			//这是因为new一个实例的时候，如果没有return，就会根据构造函数内部this绑定的值生成对象，
			//如果有返回值，就会根据返回值生成对象，为了模拟这一效果，就需要判断apply后是否有返回值。
			
			//5. 若构造函数没有返回值，就会根据构造函数内部this绑定的值生成对象，并将其返回
			return instance
		  }   
		  
		  
		  Function.prototype.myNew = function () {
    //1. 创建一个空函数
    var obj = {};
    //2. 传入构造器
    Constractor = [].shift.call(arguments);
    //3. 链接原型
    obj.__proto__ = Constractor.prototype;
    //4. 改变构造函数中的this的指向
    var res = Constractor.apply(obj, arguments);
    //5. 判断构造函数是否返回的是一个对象，否则将指向this的实例返回
    return (typeof res === 'object' ) ? res : obj ;
}